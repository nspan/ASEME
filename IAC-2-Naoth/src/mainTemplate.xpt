«IMPORT statechart»
«EXTENSION JavaHelpers::NodeHelper»
«EXTENSION JavaHelpers::Variables»

«DEFINE model FOR List»
	«EXPAND model FOR ((List)this.last())»					
«ENDDEFINE»


«DEFINE model FOR statechart::Model»
	«FILE ClassName(name)+".h"-»
#ifndef «ClassName(name)»_h_
#define «ClassName(name)»_h_ 1
		
#include "Statechart.h"
#include "StartState.h"
#include "EndState.h"
#include "OrState.h"
#include "AndState.h"
#include "BasicState.h"
#include "Transitions/TransitionSegment.h"
#include "Transitions/ConditionConnector.h"
#include "transitionHeaders.h"

class «ClassName(name)»
{

public:
	
«ClassName(name)» (MessageHub* com)
{
	
    «EXPAND Node::Node FOREACH SortNodes(nodes)»	
    «EXPAND Transition::Transition( name)FOREACH transitions»	
    
}//closing constructor
		
~«ClassName(name)» ()
{
for ( StateCont::iterator it = _states.begin(); it != _states.end(); it++ )
		delete (*it);
	for ( TransitionCont::iterator it = _transitions.begin(); it != _transitions.end(); it++ )
		delete (*it);
	for ( ActCont::iterator it = _activities.begin(); it != _activities.end(); it++ )
		delete (*it);
	for ( EventCont::iterator it = _events.begin(); it != _events.end(); it++ )
		delete (*it);
	for ( CondCont::iterator it = _conditions.begin(); it != _conditions.end(); it++ )
		delete (*it);
	for ( ActionCont::iterator it = _actions.begin(); it != _actions.end(); it++ )
		delete (*it);
}//closing function

//starting the statechart in a new thread		
void Start ()
{
   _statechart->Start();
}//closing start

//stoping the statechart		
void Stop ()
{
   _statechart->Stop();
}

//check if statechart is already running
bool getStatechartIsRunning()
{
	return _statechart->getStatechartRunning();
}				
private:

	typedef std::vector<statechart_engine::State*> StateCont;
	typedef std::vector<statechart_engine::TransitionSegmentBase*> TransitionCont;
		
	StateCont _states;
	TransitionCont _transitions;
		
	typedef std::vector<IActivity*> ActCont;		
	ActCont _activities;
	//tw/testw.stct");
	//	args[1] = new String("/home/angelica/Desktop/Monas/src");
	//	args[2] = new String("activity");
	//	args[0] = new String("/home/angelica/AngelicasWorkspace/TestEdit/TestEdit.stct" );
	//	args[1] = new String("/home/angelica/Desktop/Monas/src/activities" );
	//args[2] = new String("testActivity" );
       
		//this works
		
	typedef std::vector<statechart_engine::IEvent*> EventCont;
	typedef std::vector<statechart_engine::ICondition*> CondCont;
	typedef std::vector<statechart_engine::IAction*> ActionCont;
	
	EventCont _events;
	CondCont _conditions;
	ActionCont _actions;
		
	statechart_engine::Statechart* _statechart;
				
};

#endif // «ClassName(name)»_h_
	«ENDFILE»
	
	
	«EXPAND Transition::TransitionHeaders(name) FOREACH transitions»
	
	«FILE "BlackBoard.h"-»

#ifndef BlackBoard_H
#define	 BlackBoard_H

«ReadHeaderProperties()»
#include <iostream>
#include <string>
#include <list>
#include "MessageHub.h"
#include "TimeStamp.h"
using namespace std;
using namespace statechart_engine;

class BlackBoard
{  
private:
    string name;  
    string playMode;  //gameMode  

public:
    
   list<Time_stamp> *listTimeStamps;
   «ReadClassProperties()» 
   
   «IF !variables.isEmpty -»
       
   «DeclareVariables(variables)»
		«ENDIF-»	 
   
   BlackBoard(){} 
   BlackBoard(const string& str){name=str;}
   virtual ~BlackBoard(){}
   
  /** gives access to the instance of the blackboard */
  static BlackBoard& getInstance()
  {
    /** the ONLY instance of the blackboard */
    static BlackBoard instance;
    return instance;
  }
  
  void setPlayMode(string str)
  {
   	playMode=str;
   }    

  string getPlayMode()
  { 
    return playMode;
   }

//checking events on TE 
//using event->getVariable as input from CanExecute
//at TransitionSegment.h
  bool checkEvent(string str)
  {
	//to swsto einai: otan playMode==str => tote return true
	//alla prepei na ginetai exclusive or kai dn exw arketes metavlites gia
	//to simulation. 
    if(playMode!="GameOver")//==str)//&& str!="GameOver"
	{
	//cout<<"Blk::checkEvent is "+str<<endl;
	 return true;
	}else
	return false;
  }

  //sets blackboard name
  void setBlackBoardName(const string& str)
  {
	  name=str;
  }

 //prints blackboard name
  void printBlackBoardName()
  {
    cout<<"BlackBoard name is "<<name<<endl;
  }
  //clearing triggered timeouts
void clearPassedTimeouts()
{
	list<Time_stamp>::iterator list_counter;
	for(list_counter=listTimeStamps->begin();list_counter!=listTimeStamps->end();++list_counter)
	{
		//if timeout is true => timeout is already triggered and has to be removed
		if(list_counter->getTrigger()==true)
		{
			listTimeStamps->erase(list_counter);
		}
	}
}//closing function
  //update generated variables
  void updateVars()
  {
   //enter your code here
  }

  //for use in spl only
  void attachTo(MessageHub* hub)
  {
	 //implement for spl
  }
};


#endif	/* BlackBoard_H */
	«ENDFILE»
	
«ENDDEFINE»





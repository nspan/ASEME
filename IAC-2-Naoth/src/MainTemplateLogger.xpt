«IMPORT statechart»
«EXTENSION JavaHelpers::NodeHelper»

«DEFINE model FOR List»
	«EXPAND model FOR ((List)this.last())»					
«ENDDEFINE»


«DEFINE model FOR statechart::Model»
	«FILE ClassName(name)+".h"-»
#ifndef «ClassName(name)»_h_
#define «ClassName(name)»_h_ 1
		
#include "architecture/statechartEngine/Statechart.h"
#include "architecture/statechartEngine/StartState.h"
#include "architecture/statechartEngine/EndState.h"
#include "architecture/statechartEngine/OrState.h"
#include "architecture/statechartEngine/AndState.h"
#include "architecture/statechartEngine/BasicState.h"
#include "architecture/statechartEngine/Transitions/TransitionSegment.h"
#include "architecture/statechartEngine/Transitions/ConditionConnector.h"

#include "architecture/statechartWrapper.h"

class «ClassName(name)» : public StatechartWrapper
{

public:
	
	«ClassName(name)» (Narukom* com);
		
	~«ClassName(name)» ();
		
	void Start ();
		
	void Stop ();
		
private:
	
	typedef std::vector<statechart_engine::State*> StateCont;
	typedef std::vector<statechart_engine::TransitionSegmentBase*> TransitionCont;
		
	StateCont _states;
	TransitionCont _transitions;
	
	typedef std::vector<IActivity*> ActCont;		
	ActCont _activities;
		
	typedef std::vector<statechart_engine::IEvent*> EventCont;
	typedef std::vector<statechart_engine::ICondition*> CondCont;
	typedef std::vector<statechart_engine::IAction*> ActionCont;
		
	EventCont _events;
	CondCont _conditions;
	ActionCont _actions;
		
	statechart_engine::Statechart* _statechart;
			
};

#endif // «ClassName(name)»_h_
	«ENDFILE»
	
	
	«EXPAND TransitionLogger::TransitionHeadersLogger(name) FOREACH transitions»
	
	
	«FILE ClassName(name)+".cpp"-»
	
#include "«ClassName(name)+".h"»"
#include "transitionHeaders.h"

using namespace statechart_engine;

namespace
{
	StatechartRegistrar<«ClassName(name)»>::Type temp("«ClassName(name)»");
}
	
«ClassName(name)»::«ClassName(name)»(Narukom* com)
{

	«EXPAND Node::Node FOREACH SortNodes(nodes)»	
	«EXPAND TransitionLogger::TransitionLogger( name)FOREACH transitions»
	
}

«ClassName(name)»::~«ClassName(name)»()
{
	for ( StateCont::iterator it = _states.begin(); it != _states.end(); it++ )
		delete (*it);
	for ( TransitionCont::iterator it = _transitions.begin(); it != _transitions.end(); it++ )
		delete (*it);
	for ( ActCont::iterator it = _activities.begin(); it != _activities.end(); it++ )
		delete (*it);
	for ( EventCont::iterator it = _events.begin(); it != _events.end(); it++ )
		delete (*it);
	for ( CondCont::iterator it = _conditions.begin(); it != _conditions.end(); it++ )
		delete (*it);
	for ( ActionCont::iterator it = _actions.begin(); it != _actions.end(); it++ )
		delete (*it);
}

void «ClassName(name)»::Start ()
{
	_statechart->Start();
}

void «ClassName(name)»::Stop ()
{
	_statechart->Stop();
}

	«ENDFILE»
	«FILE "CMakeLists.txt"»
message ( STATUS "" )
message ( STATUS " _..::: Configuring «ClassName(name)» :::.._ " )
message ( STATUS "" )

#add_library ( «ClassName(name)» ${LibBuildType}  «ClassName(name)+".cpp"» )  
              
add_library ( «ClassName(name)» SHARED
        «ClassName(name)+".cpp"» )
        
#target_link_libraries ( «ClassName(name)» statechartEngine narukom )

install ( TARGETS «ClassName(name)»
RUNTIME DESTINATION   bin
LIBRARY DESTINATION   lib
ARCHIVE DESTINATION   lib/static )

set ( StatechartLibraries ${StatechartLibraries} «ClassName(name)» PARENT_SCOPE )
	«ENDFILE»
«ENDDEFINE»





«IMPORT statechart»

«EXTENSION aseme::m2t::IACmodel::nodeHelper»
«EXTENSION aseme::m2t::IACmodel::ComplexBehaviourHelper»

«DEFINE javaClass FOR List»
	«EXPAND javaClass FOR ((List)this.last())»					
«ENDDEFINE»

«DEFINE javaClass FOR statechart::Model»
	«LET name AS packageName»
		 
		«EXPAND nodeClass(packageName, this) FOREACH tree2list(this.nodes.first()) »
		
		«EXPAND variableHolderClass(packageName, this) FOREACH variables»
	«ENDLET»
«ENDDEFINE»

«DEFINE Children(String packageName, Model model) FOR statechart::Node»
	
«ENDDEFINE»

«DEFINE variableHolderClass(String packageName, Model model) FOR statechart::Variable»
	«FILE variableHolderFileName()»
	package «packageName»;
	import jade.core.behaviours.Behaviour;

	«IF type.compareTo("ACLMessage")==0»import jade.lang.acl.ACLMessage;«ENDIF»
	
	public class «type»Holder {
		«type» «lowerCaseFirstCharacterOfVariable(this)» = null;
		Behaviour owner;
	
		public «type»Holder(Behaviour owner) {
			super();
			this.owner = owner;
		}
	
		public «type» get«type»() {
			return «lowerCaseFirstCharacterOfVariable(this)»;
		}
	
		public void set«type»(«type» «lowerCaseFirstCharacterOfVariable(this)») {
			this.«lowerCaseFirstCharacterOfVariable(this)» = «lowerCaseFirstCharacterOfVariable(this)»;
		}
	
		public Behaviour getOwner() {
			return owner;
		}
	}
	«ENDFILE»
«ENDDEFINE»

«DEFINE nodeClass(String packageName, Model model) FOR statechart::Node»
	«IF !name.startsWith("0")»
		«IF label.compareTo("0")==0»
			«EXPAND agentClass(packageName, model) FOR this»
		«ELSE»
			«EXPAND behaviourClass(packageName, model) FOR this»
		«ENDIF»
	«ENDIF»
«ENDDEFINE»



«DEFINE agentClass(String packageName, Model model) FOR statechart::Node»
  «FILE classFileName()»
   		package «packageName»;
   		
		import jade.core.Agent;
		
      	public class «className()» extends Agent{
  		
  		public void setup(){
     		//add behaviour
     		addBehaviour(«getAgentBehaviour(this,model)»);
     	}
     	protected void takeDown() {
			doDelete();
		}
	}
  «ENDFILE»
«ENDDEFINE»

«DEFINE behaviourClass(String packageName, Model model) FOR statechart::Node»
	«IF type.compareTo("BASIC")==0»
		«EXPAND simpleBehaviourClass(packageName, model) FOR this»
	«ELSE»
		«IF determineBehaviourType(this,model).compareTo("parallel")==0»
			«EXPAND parallelBehaviourClass(packageName, model) FOR this»
		«ELSEIF (determineBehaviourType(this,model).compareTo("sequence")==0) || (determineBehaviourType(this,model).compareTo("or")==0)»
			«EXPAND sequenceBehaviourClass(packageName, model) FOR this»
		«ELSEIF determineBehaviourType(this,model).compareTo("forever")==0»
			«EXPAND cyclicBehaviourClass(packageName, model) FOR this»
		«ELSEIF determineBehaviourType(this,model).compareTo("one_or_more_times")==0»
			«EXPAND simpleOneOrMoreBehaviourClass(packageName, model) FOR this»
		«ELSEIF determineBehaviourType(this,model).compareTo("zero_or_more_times")==0»
			«EXPAND simpleZeroOrMoreBehaviourClass(packageName, model) FOR this»
		«ENDIF»
	«ENDIF»
«ENDDEFINE»

«DEFINE simpleZeroOrMoreBehaviourClass(String packageName, Model model) FOR statechart::Node»
  «FILE classFileName()»
   		package «packageName»;
   		
		import jade.core.Agent;
		import jade.core.behaviours.Behaviour;
		import jade.core.behaviours.SimpleBehaviour;

		public class «className()» extends SimpleBehaviour{

      		«addVariables(this,model)»
      		protected boolean finished;
      		Behaviour simpleZeroOrMoreTimesBehaviour = null;

         	public «className()»(Agent a«getParams(this,model)»){
				super(a);
				«instantiateParams(this,model)»
        		if («getTransitionToChildOf(this,model)»){
					simpleZeroOrMoreTimesBehaviour = new «getCyclicBehaviour(this,model)»;
					myAgent.addBehaviour(simpleZeroOrMoreTimesBehaviour);
					finished = false;
				}
				else finished = true;
			}

 	        public void action(){
 	        	if (simpleZeroOrMoreTimesBehaviour.done()){
 	        		if («getTransitionToSelfConditionOfChild(this,model)»){
						simpleZeroOrMoreTimesBehaviour = new «getCyclicBehaviour(this,model)»;
						myAgent.addBehaviour(simpleZeroOrMoreTimesBehaviour);
					}
					else finished = true;
				}
 	        }
 	        
 	        public boolean done() {
    			return finished;
  			}
 	        
   	  }
	  «ENDFILE»
«ENDDEFINE»

«DEFINE simpleOneOrMoreBehaviourClass(String packageName, Model model) FOR statechart::Node»
  «FILE classFileName()»
   		package «packageName»;
   		
		import jade.core.Agent;
		import jade.core.behaviours.Behaviour;
		import jade.core.behaviours.SimpleBehaviour;

		public class «className()» extends SimpleBehaviour{

      		«addVariables(this,model)»
      		protected boolean finished;
      		Behaviour simpleOneOrMoreTimesBehaviour = null;

         	public «className()»(Agent a«getParams(this,model)»){
				super(a);
				«instantiateParams(this,model)»
				finished = false;
				simpleOneOrMoreTimesBehaviour = new «getCyclicBehaviour(this,model)»;
				myAgent.addBehaviour(simpleOneOrMoreTimesBehaviour);
    	     }

 	        public void action(){
 	        	if (simpleOneOrMoreTimesBehaviour.done()){
 	        		if («getTransitionToSelfConditionOfChild(this,model)»){
						simpleOneOrMoreTimesBehaviour = new «getCyclicBehaviour(this,model)»;
						myAgent.addBehaviour(simpleOneOrMoreTimesBehaviour);
					}
					else finished = true;
				}
 	        }
 	        
 	        public boolean done() {
    			return finished;
  			}
 	        
   	  }
	  «ENDFILE»
«ENDDEFINE»

«DEFINE cyclicBehaviourClass(String packageName, Model model) FOR statechart::Node»
  «FILE classFileName()»
   	package «packageName»;
   		
	import jade.core.Agent;
	import jade.core.behaviours.Behaviour;
	import jade.core.behaviours.CyclicBehaviour;
	
	public class «className()» extends CyclicBehaviour{

   		«addVariables(this,model)»
   		Behaviour foreverBehaviour = null;

		public «className()»(Agent a«getParams(this, model)») {
			super(a);
			«instantiateParams(this,model)»
			foreverBehaviour = new «getCyclicBehaviour(this,model)»;
			myAgent.addBehaviour(foreverBehaviour);
		}
		public void action() {
			if (foreverBehaviour.done()){
				foreverBehaviour = new «getCyclicBehaviour(this,model)»;
				myAgent.addBehaviour(foreverBehaviour);
			}
		}
	}
  «ENDFILE»
«ENDDEFINE»

«DEFINE sequenceBehaviourClass(String packageName, Model model) FOR statechart::Node»
  «FILE classFileName()»
   	package «packageName»;
   		
	import jade.core.Agent;
	import jade.core.behaviours.SequentialBehaviour;
	
	public class «className()» extends SequentialBehaviour {
	
   		«addVariables(this,model)»

		public «className()»(Agent a«getParams(this, model)») {
			super(a);
			«instantiateParams(this,model)»
			«IF determineBehaviourType(this,model).compareTo("or")==0»
				«addConditionalSubBehaviour(this,model)»
			«ELSE»
				«addSubBehaviours(this,model)»
			«ENDIF»
		}
	}
  «ENDFILE»
«ENDDEFINE»

«DEFINE parallelBehaviourClass(String packageName, Model model) FOR statechart::Node»
  «FILE classFileName()»
   	package «packageName»;
   		
	import jade.core.Agent;
	import jade.core.behaviours.ParallelBehaviour;
	import jade.core.behaviours.ThreadedBehaviourFactory;

	public class «className()» extends ParallelBehaviour{
	
		ThreadedBehaviourFactory tbf = null;
   		«addVariables(this,model)»
   		
       	public «className()»(Agent a«getParams(this, model)»){
			super(a,ParallelBehaviour.WHEN_ALL);
			«instantiateParams(this,model)»
			tbf = new ThreadedBehaviourFactory();
			«addParallelBehaviours(this,model)»
   	    }
   	}
  «ENDFILE»
«ENDDEFINE»

«DEFINE simpleBehaviourClass(String packageName, Model model) FOR statechart::Node»
  «FILE classFileName()»
   		package «packageName»;
   		
		import jade.core.Agent;
		import jade.core.behaviours.SimpleBehaviour;
		«importMessageClasses(this)»

		public class «className()» extends SimpleBehaviour{

      		«addVariables(this,model)»
			«addMessageTemplateVariable(this)»
			boolean finished = false;

         	public «className()»(Agent a«getParams(this,model)»){
				super(a);
				«instantiateParams(this,model)»
    	     }
    	    
 	        public void action(){
       		  	«addAction(this, model)»
 	        }
 	        
 	        public boolean done() {
    			return finished;
  			}
 	        
   	  }
	  «ENDFILE»
«ENDDEFINE»
